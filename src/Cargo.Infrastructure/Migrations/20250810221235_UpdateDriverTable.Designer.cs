// <auto-generated />
using System;
using Cargo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cargo.Infrastructure.Migrations
{
    [DbContext(typeof(CargoDbContext))]
    [Migration("20250810221235_UpdateDriverTable")]
    partial class UpdateDriverTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cargo.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.ToTable("Drivers", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdjustmentsTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("AdminFeeAppliesBeforeTaxes")
                        .HasColumnType("bit");

                    b.Property<decimal>("AdminFeeFlat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdminFeePercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DrayFsc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrayPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DriverShareAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DriverSharePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("GrossRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HourlyTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OwnershipTypeAtBatch")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatementEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StatementStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TemporaryEmergencyFsc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TripTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VehicleOwnershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WaitPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WaitingPayoutPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("WaitingRawTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WaitingTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BatchNumber")
                        .IsUnique();

                    b.HasIndex("DriverId");

                    b.HasIndex("StatementEndDate");

                    b.HasIndex("StatementStartDate");

                    b.HasIndex("Status");

                    b.HasIndex("VehicleOwnershipId");

                    b.ToTable("DriverBatches", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatchHourly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<decimal>("RatePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverBatchId");

                    b.ToTable("DriverBatchHourlies", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatchLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BandLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("BasePay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DarNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DestinationPc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("DriverBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FscPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LegMiles")
                        .HasColumnType("int");

                    b.Property<string>("LoadNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoadType")
                        .HasColumnType("int");

                    b.Property<decimal>("NetWefp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OriginPc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RateType")
                        .HasColumnType("int");

                    b.Property<decimal>("TemporaryEmergencyFuelPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverBatchId");

                    b.HasIndex("LoadNumber");

                    b.HasIndex("LoadType");

                    b.ToTable("DriverBatchLoads", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatchWait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CpPoNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DarNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("DriverBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FinalPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("RatePerMinute")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RawPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaitMinutes")
                        .HasColumnType("int");

                    b.Property<int>("WaitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverBatchId");

                    b.HasIndex("WaitType");

                    b.ToTable("DriverBatchWaits", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverContracts", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverVehicleAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriverRole")
                        .HasColumnType("int");

                    b.Property<string>("EndReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("DriverId", "VehicleId", "AssignedAt")
                        .IsUnique();

                    b.ToTable("DriverVehicleAssignments", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasPrecision(5, 2)
                        .HasColumnType("time(5)");

                    b.Property<decimal>("EstimatedFuelCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedTollCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RouteType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalDistance")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("Waypoints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasFilter("[DriverId] IS NOT NULL");

                    b.HasIndex("OwnerCompanyId")
                        .IsUnique();

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.VehicleOwnership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OwnedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OwnedUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OwnerCompanyId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleId", "OwnerCompanyId", "OwnedFrom")
                        .IsUnique();

                    b.ToTable("VehicleOwnerships", (string)null);
                });

            modelBuilder.Entity("Cargo.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Cargo.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Company", b =>
                {
                    b.OwnsOne("Cargo.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Address_ZipCode");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Cargo.Domain.ValueObjects.TaxProfile", "TaxProfile", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("CompoundQstOverGst")
                                .HasColumnType("bit")
                                .HasColumnName("TaxProfile_CompoundQstOverGst");

                            b1.Property<decimal>("GstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_GstRate");

                            b1.Property<decimal>("HstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_HstRate");

                            b1.Property<decimal>("PstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_PstRate");

                            b1.Property<decimal>("QstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_QstRate");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("TaxProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Driver", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.Company", "Company")
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cargo.Domain.Entities.Route", null)
                        .WithMany("AssignedDrivers")
                        .HasForeignKey("RouteId");

                    b.OwnsOne("Cargo.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Address_ZipCode");

                            b1.HasKey("DriverId");

                            b1.ToTable("Drivers");

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatch", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Domain.Entities.VehicleOwnership", "VehicleOwnership")
                        .WithMany()
                        .HasForeignKey("VehicleOwnershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Cargo.Domain.ValueObjects.TaxProfile", "TaxProfile", b1 =>
                        {
                            b1.Property<Guid>("DriverBatchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("CompoundQstOverGst")
                                .HasColumnType("bit")
                                .HasColumnName("TaxProfile_CompoundQstOverGst");

                            b1.Property<decimal>("GstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_GstRate");

                            b1.Property<decimal>("HstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_HstRate");

                            b1.Property<decimal>("PstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_PstRate");

                            b1.Property<decimal>("QstRate")
                                .HasPrecision(5, 4)
                                .HasColumnType("decimal(5,4)")
                                .HasColumnName("TaxProfile_QstRate");

                            b1.HasKey("DriverBatchId");

                            b1.ToTable("DriverBatches");

                            b1.WithOwner()
                                .HasForeignKey("DriverBatchId");
                        });

                    b.OwnsOne("Cargo.Domain.ValueObjects.TaxAmounts", "Taxes", b1 =>
                        {
                            b1.Property<Guid>("DriverBatchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("GstAmount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Taxes_GstAmount");

                            b1.Property<decimal>("HstAmount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Taxes_HstAmount");

                            b1.Property<decimal>("PstAmount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Taxes_PstAmount");

                            b1.Property<decimal>("QstAmount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Taxes_QstAmount");

                            b1.HasKey("DriverBatchId");

                            b1.ToTable("DriverBatches");

                            b1.WithOwner()
                                .HasForeignKey("DriverBatchId");
                        });

                    b.Navigation("Driver");

                    b.Navigation("TaxProfile")
                        .IsRequired();

                    b.Navigation("Taxes")
                        .IsRequired();

                    b.Navigation("VehicleOwnership");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatchHourly", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.DriverBatch", "DriverBatch")
                        .WithMany("Hourlies")
                        .HasForeignKey("DriverBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverBatch");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatchLoad", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.DriverBatch", "DriverBatch")
                        .WithMany("Loads")
                        .HasForeignKey("DriverBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverBatch");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatchWait", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.DriverBatch", "DriverBatch")
                        .WithMany("Waits")
                        .HasForeignKey("DriverBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverBatch");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverContract", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cargo.Domain.ValueObjects.DriverSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("DriverContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("AdminFee")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AdminFee");

                            b1.Property<int>("FscMode")
                                .HasColumnType("int")
                                .HasColumnName("FscMode");

                            b1.Property<decimal>("FscRate")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("FscRate");

                            b1.Property<decimal>("HourlyRate")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("HourlyRate");

                            b1.Property<int>("NumPayBands")
                                .HasColumnType("int")
                                .HasColumnName("NumPayBands");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Province");

                            b1.Property<decimal>("WaitingPerMinute")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("WaitingPerMinute");

                            b1.HasKey("DriverContractId");

                            b1.ToTable("DriverContracts");

                            b1.WithOwner()
                                .HasForeignKey("DriverContractId");

                            b1.OwnsOne("Cargo.Domain.ValueObjects.TaxProfile", "TaxProfile", b2 =>
                                {
                                    b2.Property<Guid>("DriverSettingsDriverContractId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("CompoundQstOverGst")
                                        .HasColumnType("bit")
                                        .HasColumnName("CompoundQstOverGst");

                                    b2.Property<decimal>("GstRate")
                                        .HasColumnType("decimal(5,2)")
                                        .HasColumnName("GstRate");

                                    b2.Property<decimal>("HstRate")
                                        .HasColumnType("decimal(5,2)")
                                        .HasColumnName("HstRate");

                                    b2.Property<decimal>("PstRate")
                                        .HasColumnType("decimal(5,2)")
                                        .HasColumnName("PstRate");

                                    b2.Property<decimal>("QstRate")
                                        .HasColumnType("decimal(5,2)")
                                        .HasColumnName("QstRate");

                                    b2.HasKey("DriverSettingsDriverContractId");

                                    b2.ToTable("DriverContracts");

                                    b2.WithOwner()
                                        .HasForeignKey("DriverSettingsDriverContractId");
                                });

                            b1.Navigation("TaxProfile")
                                .IsRequired();
                        });

                    b.OwnsMany("Cargo.Domain.ValueObjects.RateBand", "RateBands", b1 =>
                        {
                            b1.Property<Guid>("DriverContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Band")
                                .HasColumnType("int");

                            b1.Property<int>("LoadType")
                                .HasColumnType("int");

                            b1.Property<string>("BandName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<decimal>("ContainerRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("FlatbedRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("MaxMiles")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("MinMiles")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("DriverContractId", "Band", "LoadType");

                            b1.ToTable("RateBands", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DriverContractId");
                        });

                    b.Navigation("Driver");

                    b.Navigation("RateBands");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverVehicleAssignment", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.Company", "OwnerCompany")
                        .WithMany()
                        .HasForeignKey("OwnerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cargo.Domain.Entities.Route", null)
                        .WithMany("AssignedVehicles")
                        .HasForeignKey("RouteId");

                    b.OwnsOne("Cargo.Domain.ValueObjects.PlateNumber", "PlateNumber", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("IssuingAuthority")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PlateNumber_IssuingAuthority");

                            b1.Property<string>("PlateType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PlateNumber_Value");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.Navigation("OwnerCompany");

                    b.Navigation("PlateNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Cargo.Domain.Entities.VehicleOwnership", b =>
                {
                    b.HasOne("Cargo.Domain.Entities.Company", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Cargo.Domain.Entities.Company", "OwnerCompany")
                        .WithMany()
                        .HasForeignKey("OwnerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerCompany");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Company", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.DriverBatch", b =>
                {
                    b.Navigation("Hourlies");

                    b.Navigation("Loads");

                    b.Navigation("Waits");
                });

            modelBuilder.Entity("Cargo.Domain.Entities.Route", b =>
                {
                    b.Navigation("AssignedDrivers");

                    b.Navigation("AssignedVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
